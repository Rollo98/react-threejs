'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _three = require('three');

var THREE = _interopRequireWildcard(_three);

var _Pass2 = require('./Pass');

var _Pass3 = _interopRequireDefault(_Pass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RenderingPass = function (_Pass) {
	_inherits(RenderingPass, _Pass);

	function RenderingPass() {
		_classCallCheck(this, RenderingPass);

		var _this = _possibleConstructorReturn(this, (RenderingPass.__proto__ || Object.getPrototypeOf(RenderingPass)).call(this));

		_this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
		_this.scene = new THREE.Scene();
		_this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);
		_this.quad.frustumCulled = false;
		_this.scene.add(_this.quad);

		return _this;
	}

	return RenderingPass;
}(_Pass3.default);

exports.default = RenderingPass;