'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _three = require('three');

var THREE = _interopRequireWildcard(_three);

var _Pass2 = require('./Pass');

var _Pass3 = _interopRequireDefault(_Pass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ShaderPass = function (_Pass) {
	_inherits(ShaderPass, _Pass);

	function ShaderPass(shader, textureID) {
		_classCallCheck(this, ShaderPass);

		var _this = _possibleConstructorReturn(this, (ShaderPass.__proto__ || Object.getPrototypeOf(ShaderPass)).call(this));

		_this.textureID = textureID !== undefined ? textureID : 'tDiffuse';

		if (shader instanceof THREE.ShaderMaterial) {

			_this.uniforms = shader.uniforms;

			_this.material = shader;
		} else if (shader) {

			_this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);

			_this.material = new THREE.ShaderMaterial({

				defines: Object.assign({}, shader.defines),
				uniforms: _this.uniforms,
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader

			});
		}

		_this.fsQuad = new _Pass3.default.FullScreenQuad(_this.material);

		return _this;
	}

	_createClass(ShaderPass, [{
		key: 'render',
		value: function render(renderer, writeBuffer, readBuffer) {

			if (this.uniforms[this.textureID]) {

				this.uniforms[this.textureID].value = readBuffer.texture;
			}

			this.fsQuad.material = this.material;

			if (this.renderToScreen) {

				renderer.setRenderTarget(null);
				this.fsQuad.render(renderer);
			} else {

				renderer.setRenderTarget(writeBuffer);
				// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600
				if (this.clear) {

					renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
				}
				this.fsQuad.render(renderer);
			}
		}
	}]);

	return ShaderPass;
}(_Pass3.default);

exports.default = ShaderPass;