'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Pass2 = require('./Pass');

var _Pass3 = _interopRequireDefault(_Pass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MaskPass = function (_Pass) {
	_inherits(MaskPass, _Pass);

	function MaskPass(scene, camera) {
		_classCallCheck(this, MaskPass);

		var _this = _possibleConstructorReturn(this, (MaskPass.__proto__ || Object.getPrototypeOf(MaskPass)).call(this));

		_this.scene = scene;
		_this.camera = camera;

		_this.clear = true;
		_this.needsSwap = false;

		_this.inverse = false;

		return _this;
	}

	_createClass(MaskPass, [{
		key: 'render',
		value: function render(renderer, writeBuffer, readBuffer) {
			var context = renderer.context,
			    state = renderer.state;

			// don't update color or depth

			state.buffers.color.setMask(false);
			state.buffers.depth.setMask(false);

			// lock buffers

			state.buffers.color.setLocked(true);
			state.buffers.depth.setLocked(true);

			// set up stencil

			var writeValue = void 0;
			var clearValue = void 0;

			if (this.inverse) {

				writeValue = 0;
				clearValue = 1;
			} else {

				writeValue = 1;
				clearValue = 0;
			}

			state.buffers.stencil.setTest(true);
			state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);
			state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);
			state.buffers.stencil.setClear(clearValue);

			// draw into the stencil buffer

			renderer.setRenderTarget(readBuffer);
			if (this.clear) renderer.clear();
			renderer.render(this.scene, this.camera);

			renderer.setRenderTarget(writeBuffer);
			if (this.clear) renderer.clear();
			renderer.render(this.scene, this.camera);

			// unlock color and depth buffer for subsequent rendering

			state.buffers.color.setLocked(false);
			state.buffers.depth.setLocked(false);

			// only render where stencil is set to 1

			state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1
			state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);
		}
	}]);

	return MaskPass;
}(_Pass3.default);

exports.default = MaskPass;