'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Pass2 = require('./Pass');

var _Pass3 = _interopRequireDefault(_Pass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClearPass = function (_Pass) {
	_inherits(ClearPass, _Pass);

	function ClearPass(clearColor, clearAlpha) {
		_classCallCheck(this, ClearPass);

		var _this = _possibleConstructorReturn(this, (ClearPass.__proto__ || Object.getPrototypeOf(ClearPass)).call(this));

		_this.needsSwap = false;

		_this.clearColor = clearColor !== undefined ? clearColor : 0x000000;
		_this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;

		return _this;
	}

	_createClass(ClearPass, [{
		key: 'render',
		value: function render(renderer, writeBuffer, readBuffer) {

			var oldClearColor = void 0;
			var oldClearAlpha = void 0;

			if (this.clearColor) {

				oldClearColor = renderer.getClearColor().getHex();
				oldClearAlpha = renderer.getClearAlpha();

				renderer.setClearColor(this.clearColor, this.clearAlpha);
			}

			renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);
			renderer.clear();

			if (this.clearColor) {

				renderer.setClearColor(oldClearColor, oldClearAlpha);
			}
		}
	}]);

	return ClearPass;
}(_Pass3.default);

exports.default = ClearPass;