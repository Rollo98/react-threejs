'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _three = require('three');

var THREE = _interopRequireWildcard(_three);

var _Pass2 = require('./Pass');

var _Pass3 = _interopRequireDefault(_Pass2);

var _CopyShader = require('./CopyShader');

var _CopyShader2 = _interopRequireDefault(_CopyShader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TexturePass = function (_Pass) {
	_inherits(TexturePass, _Pass);

	function TexturePass(map, opacity) {
		_classCallCheck(this, TexturePass);

		var _this = _possibleConstructorReturn(this, (TexturePass.__proto__ || Object.getPrototypeOf(TexturePass)).call(this));

		var shader = _CopyShader2.default;

		_this.map = map;
		_this.opacity = opacity !== undefined ? opacity : 1.0;

		_this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);

		_this.material = new THREE.ShaderMaterial({

			uniforms: _this.uniforms,
			vertexShader: shader.vertexShader,
			fragmentShader: shader.fragmentShader,
			depthTest: false,
			depthWrite: false

		});

		_this.needsSwap = false;

		_this.fsQuad = new _Pass3.default.FullScreenQuad(null);

		return _this;
	}

	_createClass(TexturePass, [{
		key: 'render',
		value: function render(_renderer, writeBuffer, readBuffer) {

			var renderer = _renderer;

			var oldAutoClear = renderer.autoClear;
			renderer.autoClear = false;

			this.fsQuad.material = this.material;

			this.uniforms.opacity.value = this.opacity;
			this.uniforms.tDiffuse.value = this.map;
			this.material.transparent = this.opacity < 1.0;

			renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);
			if (this.clear) renderer.clear();
			this.fsQuad.render(renderer);

			renderer.autoClear = oldAutoClear;
		}
	}]);

	return TexturePass;
}(_Pass3.default);

exports.default = TexturePass;