{"ast":null,"code":"var _jsxFileName = \"/Users/rolandpaiusan/Desktop/projects/react-threejs/src/Scene.js\";\nimport \"./index.css\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport Orbitcontrols from \"three-orbitcontrols\";\nimport { HamburgerArrow } from \"react-animated-burgers\";\nimport Popup from \"./Popup\";\n\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.togglePopup = () => {\n      this.setState({\n        showDetails: !this.state.showDetails\n      });\n    };\n\n    this.state = {\n      showDetails: false\n    };\n  }\n\n  componentDidMount() {\n    this.initThree();\n  }\n\n  initThree() {\n    let camera, scene, renderer; // let group;\n\n    let container = document.getElementById(\"WebGL-output\");\n    let width = container.clientWidth,\n        height = container.clientHeight;\n    let windowHalfX = window.innerWidth / 2,\n        windowHalfY = window.innerHeight / 2;\n    let orbitControls;\n    let composer, renderPass;\n    let loadingScreen = {\n      scene: new THREE.Scene(),\n      camera: new THREE.PerspectiveCamera(60, width / height, 1, 2000) // box: new THREE.Mesh(\n      //   new THREE.BoxGeometry(0.5, 0.5, 0.5),\n      //   new THREE.MeshBasicMaterial({ color: 0x4444ff })\n      // )\n\n    };\n    let loadingManager = null;\n    let RESOURCES_LOADED = false;\n    init();\n    animate();\n\n    function init() {\n      // Init scene\n      scene = new THREE.Scene(); // group = new THREE.Group();\n      // scene.add(group);\n      // Create a loading screen\n      // loadingScreen.box.position.set(0, 0, 5);\n      // loadingScreen.camera.lookAt(loadingScreen.box.position);\n      // loadingScreen.scene.add(loadingScreen.box);\n\n      loadingManager = new THREE.LoadingManager();\n\n      loadingManager.onProgress = function () {};\n\n      loadingManager.onLoad = function () {\n        RESOURCES_LOADED = true;\n      }; // Init camera and perspective\n\n\n      camera = new THREE.PerspectiveCamera(65, width / height, 1, 2000);\n      camera.position.x = -10;\n      camera.position.y = 15;\n      camera.position.z = 500;\n      camera.lookAt(scene.position); // Orbitcontrols\n\n      orbitControls = new Orbitcontrols(camera);\n      orbitControls.autoRotate = true;\n      orbitControls.autoRotateSpeed = 0.2;\n      orbitControls.enableZoom = false;\n      orbitControls.enableDamping = true;\n      orbitControls.dampingFactor = 0.15; // friction factor\n\n      orbitControls.rotateSpeed = 0.1; // mouse sensitivity\n      // Lights\n\n      let ambientLight = new THREE.AmbientLight(0xffffff);\n      ambientLight.position.set(-10, 15, 500);\n      scene.add(ambientLight);\n      let pointLight = new THREE.PointLight(0xffffff);\n      pointLight.position.set(-10, 15, 500);\n      scene.add(pointLight);\n      let spotLight = new THREE.SpotLight(0xffffff);\n      spotLight.position.set(-10, 15, 500);\n      scene.add(spotLight);\n      let directionalLight = new THREE.DirectionalLight(0xffffff);\n      directionalLight.position.set(-10, 15, 500);\n      scene.add(directionalLight); // Texture\n\n      let planetLoader = new THREE.TextureLoader(loadingManager);\n      let backgroundLoader = new THREE.CubeTextureLoader(loadingManager);\n\n      let planetTexture = require(\"./assets/imgs/planets/world.jpg\");\n\n      let backgroundTexture = require(\"./assets/imgs/planets/stars.jpg\"); // Load planet texture\n\n\n      planetLoader.load(planetTexture, function (texture) {\n        let sphereGeometry = new THREE.SphereGeometry(220, 32, 32, 3.2);\n        let material = new THREE.MeshBasicMaterial({\n          map: texture\n        });\n        let lol = new THREE.ShaderMaterial({\n          fragmentShader: shader.fragmentShader,\n          vertexShader: shader.vertexShader,\n          uniforms: shader.uniforms\n        });\n        let mesh = new THREE.Mesh(sphereGeometry, material);\n        scene.add(mesh);\n        let sphereGeometry2 = new THREE.SphereGeometry(221, 32, 32, 3.2);\n        let material2 = new THREE.MeshPhongMaterial({\n          color: 0xffffff,\n          shininess: 100,\n          side: THREE.BackSide\n        });\n        let mesh2 = new THREE.Mesh(sphereGeometry2, material2);\n        scene.add(mesh2); // let outline = new THREE.MeshLambertMaterial({\n        //   color: 0xffffff,\n        //   side: THREE.BackSide,\n        //   emissive: 0xffffff\n        // });\n        // let outlineMesh = new THREE.Mesh(sphereGeometry, outline);\n        // outlineMesh.scale.multiplyScalar(1.01);\n        // scene.add(outlineMesh);\n      }); // Load background texture (cube)\n\n      backgroundLoader.load([backgroundTexture, backgroundTexture, backgroundTexture, backgroundTexture, backgroundTexture, backgroundTexture], function (texture) {\n        scene.background = texture;\n      });\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(width, height);\n      container.appendChild(renderer.domElement);\n      window.addEventListener(\"resize\", onWindowResize, false);\n    }\n\n    function animate() {\n      if (RESOURCES_LOADED === false) {\n        requestAnimationFrame(animate);\n        renderer.render(loadingScreen.scene, loadingScreen.camera);\n        return; // Stop the function here.\n      }\n\n      requestAnimationFrame(animate);\n      orbitControls.update(); // required when damping is enabled; otherwise, not required\n\n      render();\n    }\n\n    function render() {\n      scene.rotation.y += 0.002;\n      scene.rotation.x += 0.002;\n      renderer.render(scene, camera);\n    }\n\n    function onWindowResize() {\n      windowHalfX = window.innerWidth / 2;\n      windowHalfY = window.innerHeight / 2;\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"WebGL-output\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"overlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, this.state.showDetails ? React.createElement(React.Fragment, null, React.createElement(Popup, {\n      showDetails: this.state.showDetails,\n      closePopup: () => this.togglePopup(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    })) : React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      className: \"title text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"WEB DESIGN\"), React.createElement(HamburgerArrow, {\n      className: \"hamburger-button\",\n      isActive: this.props.showDetails,\n      toggleButton: this.togglePopup,\n      barColor: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["/Users/rolandpaiusan/Desktop/projects/react-threejs/src/Scene.js"],"names":["React","Component","THREE","Orbitcontrols","HamburgerArrow","Popup","Scene","constructor","props","togglePopup","setState","showDetails","state","componentDidMount","initThree","camera","scene","renderer","container","document","getElementById","width","clientWidth","height","clientHeight","windowHalfX","window","innerWidth","windowHalfY","innerHeight","orbitControls","composer","renderPass","loadingScreen","PerspectiveCamera","loadingManager","RESOURCES_LOADED","init","animate","LoadingManager","onProgress","onLoad","position","x","y","z","lookAt","autoRotate","autoRotateSpeed","enableZoom","enableDamping","dampingFactor","rotateSpeed","ambientLight","AmbientLight","set","add","pointLight","PointLight","spotLight","SpotLight","directionalLight","DirectionalLight","planetLoader","TextureLoader","backgroundLoader","CubeTextureLoader","planetTexture","require","backgroundTexture","load","texture","sphereGeometry","SphereGeometry","material","MeshBasicMaterial","map","lol","ShaderMaterial","fragmentShader","shader","vertexShader","uniforms","mesh","Mesh","sphereGeometry2","material2","MeshPhongMaterial","color","shininess","side","BackSide","mesh2","background","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","addEventListener","onWindowResize","requestAnimationFrame","render","update","rotation","aspect","updateProjectionMatrix"],"mappings":"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","sourcesContent":["import \"./index.css\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport Orbitcontrols from \"three-orbitcontrols\";\nimport { HamburgerArrow } from \"react-animated-burgers\";\nimport Popup from \"./Popup\";\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { showDetails: false };\n  }\n  componentDidMount() {\n    this.initThree();\n  }\n  togglePopup = () => {\n    this.setState({ showDetails: !this.state.showDetails });\n  };\n  initThree() {\n    let camera, scene, renderer;\n    // let group;\n    let container = document.getElementById(\"WebGL-output\");\n    let width = container.clientWidth,\n      height = container.clientHeight;\n    let windowHalfX = window.innerWidth / 2,\n      windowHalfY = window.innerHeight / 2;\n    let orbitControls;\n    let composer, renderPass;\n\n    let loadingScreen = {\n      scene: new THREE.Scene(),\n      camera: new THREE.PerspectiveCamera(60, width / height, 1, 2000)\n      // box: new THREE.Mesh(\n      //   new THREE.BoxGeometry(0.5, 0.5, 0.5),\n      //   new THREE.MeshBasicMaterial({ color: 0x4444ff })\n      // )\n    };\n\n    let loadingManager = null;\n    let RESOURCES_LOADED = false;\n\n    init();\n    animate();\n\n    function init() {\n      // Init scene\n      scene = new THREE.Scene();\n      // group = new THREE.Group();\n      // scene.add(group);\n\n      // Create a loading screen\n      // loadingScreen.box.position.set(0, 0, 5);\n      // loadingScreen.camera.lookAt(loadingScreen.box.position);\n      // loadingScreen.scene.add(loadingScreen.box);\n      loadingManager = new THREE.LoadingManager();\n      loadingManager.onProgress = function() {};\n      loadingManager.onLoad = function() {\n        RESOURCES_LOADED = true;\n      };\n\n      // Init camera and perspective\n      camera = new THREE.PerspectiveCamera(65, width / height, 1, 2000);\n      camera.position.x = -10;\n      camera.position.y = 15;\n      camera.position.z = 500;\n      camera.lookAt(scene.position);\n\n      // Orbitcontrols\n      orbitControls = new Orbitcontrols(camera);\n      orbitControls.autoRotate = true;\n      orbitControls.autoRotateSpeed = 0.2;\n      orbitControls.enableZoom = false;\n      orbitControls.enableDamping = true;\n      orbitControls.dampingFactor = 0.15; // friction factor\n      orbitControls.rotateSpeed = 0.1; // mouse sensitivity\n\n      // Lights\n      let ambientLight = new THREE.AmbientLight(0xffffff);\n      ambientLight.position.set(-10, 15, 500);\n      scene.add(ambientLight);\n\n      let pointLight = new THREE.PointLight(0xffffff);\n      pointLight.position.set(-10, 15, 500);\n      scene.add(pointLight);\n\n      let spotLight = new THREE.SpotLight(0xffffff);\n      spotLight.position.set(-10, 15, 500);\n      scene.add(spotLight);\n\n      let directionalLight = new THREE.DirectionalLight(0xffffff);\n      directionalLight.position.set(-10, 15, 500);\n      scene.add(directionalLight);\n\n      // Texture\n      let planetLoader = new THREE.TextureLoader(loadingManager);\n      let backgroundLoader = new THREE.CubeTextureLoader(loadingManager);\n      let planetTexture = require(\"./assets/imgs/planets/world.jpg\");\n      let backgroundTexture = require(\"./assets/imgs/planets/stars.jpg\");\n\n      // Load planet texture\n      planetLoader.load(planetTexture, function(texture) {\n        let sphereGeometry = new THREE.SphereGeometry(220, 32, 32, 3.2);\n        let material = new THREE.MeshBasicMaterial({\n          map: texture\n        });\n        let lol = new THREE.ShaderMaterial({\n          fragmentShader: shader.fragmentShader,\n          vertexShader: shader.vertexShader,\n          uniforms: shader.uniforms\n        });\n        let mesh = new THREE.Mesh(sphereGeometry, material);\n        scene.add(mesh);\n        let sphereGeometry2 = new THREE.SphereGeometry(221, 32, 32, 3.2);\n        let material2 = new THREE.MeshPhongMaterial({\n          color: 0xffffff,\n          shininess: 100,\n          side: THREE.BackSide\n        });\n        let mesh2 = new THREE.Mesh(sphereGeometry2, material2);\n        scene.add(mesh2);\n\n        // let outline = new THREE.MeshLambertMaterial({\n        //   color: 0xffffff,\n        //   side: THREE.BackSide,\n        //   emissive: 0xffffff\n        // });\n        // let outlineMesh = new THREE.Mesh(sphereGeometry, outline);\n        // outlineMesh.scale.multiplyScalar(1.01);\n        // scene.add(outlineMesh);\n      });\n\n      // Load background texture (cube)\n      backgroundLoader.load(\n        [\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture\n        ],\n        function(texture) {\n          scene.background = texture;\n        }\n      );\n\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(width, height);\n      container.appendChild(renderer.domElement);\n\n      window.addEventListener(\"resize\", onWindowResize, false);\n    }\n\n    function animate() {\n      if (RESOURCES_LOADED === false) {\n        requestAnimationFrame(animate);\n        renderer.render(loadingScreen.scene, loadingScreen.camera);\n        return; // Stop the function here.\n      }\n      requestAnimationFrame(animate);\n      orbitControls.update(); // required when damping is enabled; otherwise, not required\n      render();\n    }\n    function render() {\n      scene.rotation.y += 0.002;\n      scene.rotation.x += 0.002;\n      renderer.render(scene, camera);\n    }\n    function onWindowResize() {\n      windowHalfX = window.innerWidth / 2;\n      windowHalfY = window.innerHeight / 2;\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  }\n  render() {\n    return (\n      <div id=\"WebGL-output\">\n        <div className=\"overlay\">\n          {this.state.showDetails ? (\n            <>\n              <Popup\n                showDetails={this.state.showDetails}\n                closePopup={() => this.togglePopup()}\n              />\n            </>\n          ) : (\n            <>\n              <h1 className=\"title text-center\">WEB DESIGN</h1>\n              <HamburgerArrow\n                className=\"hamburger-button\"\n                isActive={this.props.showDetails}\n                toggleButton={this.togglePopup}\n                barColor=\"white\"\n              />\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Scene;\n"]},"metadata":{},"sourceType":"module"}