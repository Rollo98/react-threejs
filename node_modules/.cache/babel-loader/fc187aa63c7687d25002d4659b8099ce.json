{"ast":null,"code":"var _jsxFileName = \"/Users/rolandpaiusan/Desktop/projects/react-threejs/src/Scene.js\";\nimport \"./index.css\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport Orbitcontrols from \"three-orbitcontrols\";\n\nclass Scene extends Component {\n  componentDidMount() {\n    const script = document.getElementById(\"script\");\n    this.initThree();\n  }\n\n  initThree() {\n    let camera, scene, renderer; // let group;\n\n    let container = document.getElementById(\"WebGL-output\");\n    let width = container.clientWidth,\n        height = container.clientHeight;\n    let windowHalfX = window.innerWidth / 2,\n        windowHalfY = window.innerHeight / 2;\n    let orbitControls;\n    let loadingScreen = {\n      scene: new THREE.Scene(),\n      camera: new THREE.PerspectiveCamera(60, width / height, 1, 2000) // box: new THREE.Mesh(\n      //   new THREE.BoxGeometry(0.5, 0.5, 0.5),\n      //   new THREE.MeshBasicMaterial({ color: 0x4444ff })\n      // )\n\n    };\n    let loadingManager = null;\n    let RESOURCES_LOADED = false;\n    init();\n    animate();\n\n    function init() {\n      // Init scene\n      scene = new THREE.Scene(); // group = new THREE.Group();\n      // scene.add(group);\n      // Create a loading screen\n      // loadingScreen.box.position.set(0, 0, 5);\n      // loadingScreen.camera.lookAt(loadingScreen.box.position);\n      // loadingScreen.scene.add(loadingScreen.box);\n\n      loadingManager = new THREE.LoadingManager();\n\n      loadingManager.onProgress = function () {};\n\n      loadingManager.onLoad = function () {\n        RESOURCES_LOADED = true;\n      }; // Init camera and perspective\n\n\n      camera = new THREE.PerspectiveCamera(65, width / height, 1, 2000);\n      camera.position.x = -10;\n      camera.position.y = 15;\n      camera.position.z = 500;\n      camera.lookAt(scene.position); // Orbitcontrols\n\n      orbitControls = new Orbitcontrols(camera);\n      orbitControls.autoRotate = true;\n      orbitControls.autoRotateSpeed = 0.2;\n      orbitControls.enableZoom = false;\n      orbitControls.enableDamping = true;\n      orbitControls.dampingFactor = 0.15; // friction factor\n\n      orbitControls.rotateSpeed = 0.1; // mouse sensitivity\n\n      let ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n      let pointLight = new THREE.PointLight(0xffffff, 0.5);\n      scene.add(pointLight); // Texture\n\n      let planetLoader = new THREE.TextureLoader(loadingManager);\n      let backgroundLoader = new THREE.CubeTextureLoader(loadingManager);\n\n      let planetTexture = require(\"./assets/imgs/planets/world.jpg\");\n\n      let backgroundTexture = require(\"./assets/imgs/planets/stars.jpg\"); // Load planet texture\n\n\n      planetLoader.load(planetTexture, function (texture) {\n        let sphereGeometry = new THREE.SphereGeometry(200, 32, 32, 3.2);\n        let material = new THREE.MeshBasicMaterial({\n          map: texture\n        });\n        let mesh = new THREE.Mesh(sphereGeometry, material);\n        scene.add(mesh);\n        let outline = new THREE.MeshLambertMaterial({\n          color: 0xffffff,\n          side: THREE.BackSide,\n          emissive: 0xffffff\n        });\n        let outlineMesh = new THREE.Mesh(sphereGeometry, outline);\n        outlineMesh.scale.multiplyScalar(1.01);\n        scene.add(outlineMesh);\n      }); // Load background texture (cube)\n\n      backgroundLoader.load([backgroundTexture, backgroundTexture, backgroundTexture, backgroundTexture, backgroundTexture, backgroundTexture], function (texture) {\n        scene.background = texture;\n      });\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(width, height);\n      container.appendChild(renderer.domElement);\n      window.addEventListener(\"resize\", onWindowResize, false);\n    }\n\n    function animate() {\n      if (RESOURCES_LOADED === false) {\n        requestAnimationFrame(animate);\n        renderer.render(loadingScreen.scene, loadingScreen.camera);\n        return; // Stop the function here.\n      }\n\n      requestAnimationFrame(animate);\n      orbitControls.update(); // required when damping is enabled; otherwise, not required\n\n      render();\n    }\n\n    function render() {\n      scene.rotation.y += 0.002;\n      scene.rotation.x += 0.002;\n      renderer.render(scene, camera);\n    }\n\n    function onWindowResize() {\n      windowHalfX = window.innerWidth / 2;\n      windowHalfY = window.innerHeight / 2;\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"WebGL-output\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"overlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"WEB DESIGN\")));\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["/Users/rolandpaiusan/Desktop/projects/react-threejs/src/Scene.js"],"names":["React","Component","THREE","Orbitcontrols","Scene","componentDidMount","script","document","getElementById","initThree","camera","scene","renderer","container","width","clientWidth","height","clientHeight","windowHalfX","window","innerWidth","windowHalfY","innerHeight","orbitControls","loadingScreen","PerspectiveCamera","loadingManager","RESOURCES_LOADED","init","animate","LoadingManager","onProgress","onLoad","position","x","y","z","lookAt","autoRotate","autoRotateSpeed","enableZoom","enableDamping","dampingFactor","rotateSpeed","ambientLight","AmbientLight","add","pointLight","PointLight","planetLoader","TextureLoader","backgroundLoader","CubeTextureLoader","planetTexture","require","backgroundTexture","load","texture","sphereGeometry","SphereGeometry","material","MeshBasicMaterial","map","mesh","Mesh","outline","MeshLambertMaterial","color","side","BackSide","emissive","outlineMesh","scale","multiplyScalar","background","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","addEventListener","onWindowResize","requestAnimationFrame","render","update","rotation","aspect","updateProjectionMatrix"],"mappings":"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","sourcesContent":["import \"./index.css\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport Orbitcontrols from \"three-orbitcontrols\";\n\nclass Scene extends Component {\n  componentDidMount() {\n    const script = document.getElementById(\"script\");\n    this.initThree();\n  }\n  initThree() {\n    let camera, scene, renderer;\n    // let group;\n    let container = document.getElementById(\"WebGL-output\");\n    let width = container.clientWidth,\n      height = container.clientHeight;\n    let windowHalfX = window.innerWidth / 2,\n      windowHalfY = window.innerHeight / 2;\n    let orbitControls;\n\n    let loadingScreen = {\n      scene: new THREE.Scene(),\n      camera: new THREE.PerspectiveCamera(60, width / height, 1, 2000)\n      // box: new THREE.Mesh(\n      //   new THREE.BoxGeometry(0.5, 0.5, 0.5),\n      //   new THREE.MeshBasicMaterial({ color: 0x4444ff })\n      // )\n    };\n\n    let loadingManager = null;\n    let RESOURCES_LOADED = false;\n\n    init();\n    animate();\n\n    function init() {\n      // Init scene\n      scene = new THREE.Scene();\n      // group = new THREE.Group();\n      // scene.add(group);\n\n      // Create a loading screen\n      // loadingScreen.box.position.set(0, 0, 5);\n      // loadingScreen.camera.lookAt(loadingScreen.box.position);\n      // loadingScreen.scene.add(loadingScreen.box);\n      loadingManager = new THREE.LoadingManager();\n      loadingManager.onProgress = function() {};\n      loadingManager.onLoad = function() {\n        RESOURCES_LOADED = true;\n      };\n\n      // Init camera and perspective\n      camera = new THREE.PerspectiveCamera(65, width / height, 1, 2000);\n      camera.position.x = -10;\n      camera.position.y = 15;\n      camera.position.z = 500;\n      camera.lookAt(scene.position);\n\n      // Orbitcontrols\n      orbitControls = new Orbitcontrols(camera);\n      orbitControls.autoRotate = true;\n      orbitControls.autoRotateSpeed = 0.2;\n      orbitControls.enableZoom = false;\n      orbitControls.enableDamping = true;\n      orbitControls.dampingFactor = 0.15; // friction factor\n      orbitControls.rotateSpeed = 0.1; // mouse sensitivity\n\n      let ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n\n      let pointLight = new THREE.PointLight(0xffffff, 0.5);\n      scene.add(pointLight);\n\n      // Texture\n      let planetLoader = new THREE.TextureLoader(loadingManager);\n      let backgroundLoader = new THREE.CubeTextureLoader(loadingManager);\n      let planetTexture = require(\"./assets/imgs/planets/world.jpg\");\n      let backgroundTexture = require(\"./assets/imgs/planets/stars.jpg\");\n\n      // Load planet texture\n      planetLoader.load(planetTexture, function(texture) {\n        let sphereGeometry = new THREE.SphereGeometry(200, 32, 32, 3.2);\n        let material = new THREE.MeshBasicMaterial({\n          map: texture\n        });\n        let mesh = new THREE.Mesh(sphereGeometry, material);\n        scene.add(mesh);\n\n        let outline = new THREE.MeshLambertMaterial({\n          color: 0xffffff,\n          side: THREE.BackSide,\n          emissive: 0xffffff\n        });\n        let outlineMesh = new THREE.Mesh(sphereGeometry, outline);\n        outlineMesh.scale.multiplyScalar(1.01);\n        scene.add(outlineMesh);\n      });\n\n      // Load background texture (cube)\n      backgroundLoader.load(\n        [\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture\n        ],\n        function(texture) {\n          scene.background = texture;\n        }\n      );\n\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(width, height);\n      container.appendChild(renderer.domElement);\n\n      window.addEventListener(\"resize\", onWindowResize, false);\n    }\n\n    function animate() {\n      if (RESOURCES_LOADED === false) {\n        requestAnimationFrame(animate);\n        renderer.render(loadingScreen.scene, loadingScreen.camera);\n        return; // Stop the function here.\n      }\n      requestAnimationFrame(animate);\n      orbitControls.update(); // required when damping is enabled; otherwise, not required\n      render();\n    }\n    function render() {\n      scene.rotation.y += 0.002;\n      scene.rotation.x += 0.002;\n      renderer.render(scene, camera);\n    }\n    function onWindowResize() {\n      windowHalfX = window.innerWidth / 2;\n      windowHalfY = window.innerHeight / 2;\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  }\n  render() {\n    return (\n      <div id=\"WebGL-output\">\n        <div className=\"overlay\">\n          <h1 className=\"title\">WEB DESIGN</h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Scene;\n"]},"metadata":{},"sourceType":"module"}