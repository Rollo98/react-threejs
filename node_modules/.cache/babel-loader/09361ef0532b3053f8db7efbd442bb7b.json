{"ast":null,"code":"var _jsxFileName = \"/Users/rolandpaiusan/Desktop/projects/react-threejs/src/Scene.js\";\nimport \"./index.css\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport Orbitcontrols from \"three-orbitcontrols\";\nimport { HamburgerArrow } from \"react-animated-burgers\";\nimport Popup from \"./Popup\";\n\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.togglePopup = () => {\n      this.setState({\n        showDetails: !this.state.showDetails\n      });\n    };\n\n    this.state = {\n      showDetails: false\n    };\n  }\n\n  componentDidMount() {\n    this.initThree();\n  }\n\n  initThree() {\n    let camera, scene, renderer; // let group;\n\n    let container = document.getElementById(\"WebGL-output\");\n    let width = container.clientWidth,\n        height = container.clientHeight;\n    let windowHalfX = window.innerWidth / 2,\n        windowHalfY = window.innerHeight / 2;\n    let orbitControls;\n    let composer, renderPass;\n    let Shaders = {\n      earth: {\n        uniforms: {\n          texture: {\n            type: \"t\",\n            value: null\n          }\n        },\n        vertexShader: [\"varying vec3 vNormal;\", \"varying vec2 vUv;\", \"void main() {\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"vNormal = normalize( normalMatrix * normal );\", \"vUv = uv;\", \"}\"].join(\"\\n\"),\n        fragmentShader: [\"uniform sampler2D texture;\", \"varying vec3 vNormal;\", \"varying vec2 vUv;\", \"void main() {\", \"vec3 diffuse = texture2D( texture, vUv ).xyz;\", \"float intensity = 1.05 - dot( vNormal, vec3( 0.0, 0.0, 1.0 ) );\", \"vec3 atmosphere = vec3( 1.0, 1.0, 1.0 ) * pow( intensity, 3.0 );\", \"gl_FragColor = vec4( diffuse + atmosphere, 1.0 );\", \"}\"].join(\"\\n\")\n      },\n      atmosphere: {\n        uniforms: {},\n        vertexShader: [\"varying vec3 vNormal;\", \"void main() {\", \"vNormal = normalize( normalMatrix * normal );\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n        fragmentShader: [\"varying vec3 vNormal;\", \"void main() {\", \"float intensity = pow( 0.8 - dot( vNormal, vec3( 0, 0, 1.0 ) ), 12.0 );\", \"gl_FragColor = vec4( 1.0, 1.0, 1.0, 1.0 ) * intensity;\", \"}\"].join(\"\\n\")\n      }\n    };\n    let loadingScreen = {\n      scene: new THREE.Scene(),\n      camera: new THREE.PerspectiveCamera(60, width / height, 1, 2000) // box: new THREE.Mesh(\n      //   new THREE.BoxGeometry(0.5, 0.5, 0.5),\n      //   new THREE.MeshBasicMaterial({ color: 0x4444ff })\n      // )\n\n    };\n    let loadingManager = null;\n    let RESOURCES_LOADED = false;\n    init();\n    animate();\n\n    function init() {\n      // Init scene\n      scene = new THREE.Scene(); // group = new THREE.Group();\n      // scene.add(group);\n      // Create a loading screen\n      // loadingScreen.box.position.set(0, 0, 5);\n      // loadingScreen.camera.lookAt(loadingScreen.box.position);\n      // loadingScreen.scene.add(loadingScreen.box);\n\n      loadingManager = new THREE.LoadingManager();\n\n      loadingManager.onProgress = function () {};\n\n      loadingManager.onLoad = function () {\n        RESOURCES_LOADED = true;\n      }; // Init camera and perspective\n\n\n      camera = new THREE.PerspectiveCamera(65, width / height, 1, 2000);\n      camera.position.x = -10;\n      camera.position.y = 15;\n      camera.position.z = 500;\n      camera.lookAt(scene.position); // Orbitcontrols\n\n      orbitControls = new Orbitcontrols(camera);\n      orbitControls.autoRotate = true;\n      orbitControls.autoRotateSpeed = 0.2;\n      orbitControls.enableZoom = false;\n      orbitControls.enableDamping = true;\n      orbitControls.dampingFactor = 0.15; // friction factor\n\n      orbitControls.rotateSpeed = 0.1; // mouse sensitivity\n      // Lights\n\n      let ambientLight = new THREE.AmbientLight(0xffffff);\n      ambientLight.position.set(-10, 15, 500);\n      scene.add(ambientLight);\n      let pointLight = new THREE.PointLight(0xffffff);\n      pointLight.position.set(-10, 15, 500);\n      scene.add(pointLight);\n      let spotLight = new THREE.SpotLight(0xffffff);\n      spotLight.position.set(-10, 15, 500);\n      scene.add(spotLight);\n      let directionalLight = new THREE.DirectionalLight(0xffffff);\n      directionalLight.position.set(-10, 15, 500);\n      scene.add(directionalLight); // Texture\n\n      let planetLoader = new THREE.TextureLoader(loadingManager);\n      let backgroundLoader = new THREE.CubeTextureLoader(loadingManager);\n\n      let planetTexture = require(\"./assets/imgs/planets/world.jpg\");\n\n      let backgroundTexture = require(\"./assets/imgs/planets/stars.jpg\"); // Load planet texture\n      // planetLoader.load(planetTexture, function(texture) {\n      //   let sphereGeometry = new THREE.SphereGeometry(220, 32, 32, 3.2);\n      //   let material = new THREE.MeshBasicMaterial({\n      //     map: texture\n      //   });\n      //   let mesh = new THREE.Mesh(sphereGeometry, material);\n      //   scene.add(mesh);\n      //   let sphereGeometry2 = new THREE.SphereGeometry(221, 32, 32, 3.2);\n      //   let material2 = new THREE.MeshPhongMaterial({\n      //     color: 0xffffff,\n      //     shininess: 100,\n      //     side: THREE.BackSide\n      //   });\n      //   let mesh2 = new THREE.Mesh(sphereGeometry2, material2);\n      //   scene.add(mesh2);\n      // let outline = new THREE.MeshLambertMaterial({\n      //   color: 0xffffff,\n      //   side: THREE.BackSide,\n      //   emissive: 0xffffff\n      // });\n      // let outlineMesh = new THREE.Mesh(sphereGeometry, outline);\n      // outlineMesh.scale.multiplyScalar(1.01);\n      // scene.add(outlineMesh);\n      // });\n      // Load background texture (cube)\n\n\n      backgroundLoader.load([backgroundTexture, backgroundTexture, backgroundTexture, backgroundTexture, backgroundTexture, backgroundTexture], function (texture) {\n        scene.background = texture;\n      });\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(width, height);\n      container.appendChild(renderer.domElement);\n      window.addEventListener(\"resize\", onWindowResize, false);\n    }\n\n    function animate() {\n      if (RESOURCES_LOADED === false) {\n        requestAnimationFrame(animate);\n        renderer.render(loadingScreen.scene, loadingScreen.camera);\n        return; // Stop the function here.\n      }\n\n      requestAnimationFrame(animate);\n      orbitControls.update(); // required when damping is enabled; otherwise, not required\n\n      render();\n    }\n\n    function render() {\n      scene.rotation.y += 0.002;\n      scene.rotation.x += 0.002;\n      renderer.render(scene, camera);\n    }\n\n    function onWindowResize() {\n      windowHalfX = window.innerWidth / 2;\n      windowHalfY = window.innerHeight / 2;\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"WebGL-output\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"overlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, this.state.showDetails ? React.createElement(React.Fragment, null, React.createElement(Popup, {\n      showDetails: this.state.showDetails,\n      closePopup: () => this.togglePopup(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    })) : React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      className: \"title text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"WEB DESIGN\"), React.createElement(HamburgerArrow, {\n      className: \"hamburger-button\",\n      isActive: this.props.showDetails,\n      toggleButton: this.togglePopup,\n      barColor: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["/Users/rolandpaiusan/Desktop/projects/react-threejs/src/Scene.js"],"names":["React","Component","THREE","Orbitcontrols","HamburgerArrow","Popup","Scene","constructor","props","togglePopup","setState","showDetails","state","componentDidMount","initThree","camera","scene","renderer","container","document","getElementById","width","clientWidth","height","clientHeight","windowHalfX","window","innerWidth","windowHalfY","innerHeight","orbitControls","composer","renderPass","Shaders","earth","uniforms","texture","type","value","vertexShader","join","fragmentShader","atmosphere","loadingScreen","PerspectiveCamera","loadingManager","RESOURCES_LOADED","init","animate","LoadingManager","onProgress","onLoad","position","x","y","z","lookAt","autoRotate","autoRotateSpeed","enableZoom","enableDamping","dampingFactor","rotateSpeed","ambientLight","AmbientLight","set","add","pointLight","PointLight","spotLight","SpotLight","directionalLight","DirectionalLight","planetLoader","TextureLoader","backgroundLoader","CubeTextureLoader","planetTexture","require","backgroundTexture","load","background","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","addEventListener","onWindowResize","requestAnimationFrame","render","update","rotation","aspect","updateProjectionMatrix"],"mappings":"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","sourcesContent":["import \"./index.css\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport Orbitcontrols from \"three-orbitcontrols\";\nimport { HamburgerArrow } from \"react-animated-burgers\";\nimport Popup from \"./Popup\";\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { showDetails: false };\n  }\n  componentDidMount() {\n    this.initThree();\n  }\n  togglePopup = () => {\n    this.setState({ showDetails: !this.state.showDetails });\n  };\n  initThree() {\n    let camera, scene, renderer;\n    // let group;\n    let container = document.getElementById(\"WebGL-output\");\n    let width = container.clientWidth,\n      height = container.clientHeight;\n    let windowHalfX = window.innerWidth / 2,\n      windowHalfY = window.innerHeight / 2;\n    let orbitControls;\n    let composer, renderPass;\n    let Shaders = {\n      earth: {\n        uniforms: {\n          texture: { type: \"t\", value: null }\n        },\n        vertexShader: [\n          \"varying vec3 vNormal;\",\n          \"varying vec2 vUv;\",\n          \"void main() {\",\n          \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n          \"vNormal = normalize( normalMatrix * normal );\",\n          \"vUv = uv;\",\n          \"}\"\n        ].join(\"\\n\"),\n        fragmentShader: [\n          \"uniform sampler2D texture;\",\n          \"varying vec3 vNormal;\",\n          \"varying vec2 vUv;\",\n          \"void main() {\",\n          \"vec3 diffuse = texture2D( texture, vUv ).xyz;\",\n          \"float intensity = 1.05 - dot( vNormal, vec3( 0.0, 0.0, 1.0 ) );\",\n          \"vec3 atmosphere = vec3( 1.0, 1.0, 1.0 ) * pow( intensity, 3.0 );\",\n          \"gl_FragColor = vec4( diffuse + atmosphere, 1.0 );\",\n          \"}\"\n        ].join(\"\\n\")\n      },\n      atmosphere: {\n        uniforms: {},\n        vertexShader: [\n          \"varying vec3 vNormal;\",\n          \"void main() {\",\n          \"vNormal = normalize( normalMatrix * normal );\",\n          \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n          \"}\"\n        ].join(\"\\n\"),\n        fragmentShader: [\n          \"varying vec3 vNormal;\",\n          \"void main() {\",\n          \"float intensity = pow( 0.8 - dot( vNormal, vec3( 0, 0, 1.0 ) ), 12.0 );\",\n          \"gl_FragColor = vec4( 1.0, 1.0, 1.0, 1.0 ) * intensity;\",\n          \"}\"\n        ].join(\"\\n\")\n      }\n    };\n\n    let loadingScreen = {\n      scene: new THREE.Scene(),\n      camera: new THREE.PerspectiveCamera(60, width / height, 1, 2000)\n      // box: new THREE.Mesh(\n      //   new THREE.BoxGeometry(0.5, 0.5, 0.5),\n      //   new THREE.MeshBasicMaterial({ color: 0x4444ff })\n      // )\n    };\n\n    let loadingManager = null;\n    let RESOURCES_LOADED = false;\n\n    init();\n    animate();\n\n    function init() {\n      // Init scene\n      scene = new THREE.Scene();\n      // group = new THREE.Group();\n      // scene.add(group);\n\n      // Create a loading screen\n      // loadingScreen.box.position.set(0, 0, 5);\n      // loadingScreen.camera.lookAt(loadingScreen.box.position);\n      // loadingScreen.scene.add(loadingScreen.box);\n      loadingManager = new THREE.LoadingManager();\n      loadingManager.onProgress = function() {};\n      loadingManager.onLoad = function() {\n        RESOURCES_LOADED = true;\n      };\n\n      // Init camera and perspective\n      camera = new THREE.PerspectiveCamera(65, width / height, 1, 2000);\n      camera.position.x = -10;\n      camera.position.y = 15;\n      camera.position.z = 500;\n      camera.lookAt(scene.position);\n\n      // Orbitcontrols\n      orbitControls = new Orbitcontrols(camera);\n      orbitControls.autoRotate = true;\n      orbitControls.autoRotateSpeed = 0.2;\n      orbitControls.enableZoom = false;\n      orbitControls.enableDamping = true;\n      orbitControls.dampingFactor = 0.15; // friction factor\n      orbitControls.rotateSpeed = 0.1; // mouse sensitivity\n\n      // Lights\n      let ambientLight = new THREE.AmbientLight(0xffffff);\n      ambientLight.position.set(-10, 15, 500);\n      scene.add(ambientLight);\n\n      let pointLight = new THREE.PointLight(0xffffff);\n      pointLight.position.set(-10, 15, 500);\n      scene.add(pointLight);\n\n      let spotLight = new THREE.SpotLight(0xffffff);\n      spotLight.position.set(-10, 15, 500);\n      scene.add(spotLight);\n\n      let directionalLight = new THREE.DirectionalLight(0xffffff);\n      directionalLight.position.set(-10, 15, 500);\n      scene.add(directionalLight);\n\n      // Texture\n      let planetLoader = new THREE.TextureLoader(loadingManager);\n      let backgroundLoader = new THREE.CubeTextureLoader(loadingManager);\n      let planetTexture = require(\"./assets/imgs/planets/world.jpg\");\n      let backgroundTexture = require(\"./assets/imgs/planets/stars.jpg\");\n\n      // Load planet texture\n      // planetLoader.load(planetTexture, function(texture) {\n      //   let sphereGeometry = new THREE.SphereGeometry(220, 32, 32, 3.2);\n      //   let material = new THREE.MeshBasicMaterial({\n      //     map: texture\n      //   });\n\n      //   let mesh = new THREE.Mesh(sphereGeometry, material);\n      //   scene.add(mesh);\n      //   let sphereGeometry2 = new THREE.SphereGeometry(221, 32, 32, 3.2);\n      //   let material2 = new THREE.MeshPhongMaterial({\n      //     color: 0xffffff,\n      //     shininess: 100,\n      //     side: THREE.BackSide\n      //   });\n      //   let mesh2 = new THREE.Mesh(sphereGeometry2, material2);\n      //   scene.add(mesh2);\n\n      // let outline = new THREE.MeshLambertMaterial({\n      //   color: 0xffffff,\n      //   side: THREE.BackSide,\n      //   emissive: 0xffffff\n      // });\n      // let outlineMesh = new THREE.Mesh(sphereGeometry, outline);\n      // outlineMesh.scale.multiplyScalar(1.01);\n      // scene.add(outlineMesh);\n      // });\n\n      // Load background texture (cube)\n      backgroundLoader.load(\n        [\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture\n        ],\n        function(texture) {\n          scene.background = texture;\n        }\n      );\n\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(width, height);\n      container.appendChild(renderer.domElement);\n\n      window.addEventListener(\"resize\", onWindowResize, false);\n    }\n\n    function animate() {\n      if (RESOURCES_LOADED === false) {\n        requestAnimationFrame(animate);\n        renderer.render(loadingScreen.scene, loadingScreen.camera);\n        return; // Stop the function here.\n      }\n      requestAnimationFrame(animate);\n      orbitControls.update(); // required when damping is enabled; otherwise, not required\n      render();\n    }\n    function render() {\n      scene.rotation.y += 0.002;\n      scene.rotation.x += 0.002;\n      renderer.render(scene, camera);\n    }\n    function onWindowResize() {\n      windowHalfX = window.innerWidth / 2;\n      windowHalfY = window.innerHeight / 2;\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  }\n  render() {\n    return (\n      <div id=\"WebGL-output\">\n        <div className=\"overlay\">\n          {this.state.showDetails ? (\n            <>\n              <Popup\n                showDetails={this.state.showDetails}\n                closePopup={() => this.togglePopup()}\n              />\n            </>\n          ) : (\n            <>\n              <h1 className=\"title text-center\">WEB DESIGN</h1>\n              <HamburgerArrow\n                className=\"hamburger-button\"\n                isActive={this.props.showDetails}\n                toggleButton={this.togglePopup}\n                barColor=\"white\"\n              />\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Scene;\n"]},"metadata":{},"sourceType":"module"}