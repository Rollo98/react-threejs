{"version":3,"sources":["assets/imgs/planets/world.jpg","assets/imgs/planets/stars.jpg","Popup.js","Scene.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Popup","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","lib","isActive","showDetails","toggleButton","closePopup","barColor","Component","Scene","_this","togglePopup","setState","state","initThree","camera","scene","renderer","orbitControls","shader","uniforms","material","mesh","container","document","getElementById","width","clientWidth","height","clientHeight","Shaders","window","innerWidth","innerHeight","earth","texture","type","value","vertexShader","join","fragmentShader","atmosphere","loadingScreen","THREE","loadingManager","RESOURCES_LOADED","onWindowResize","aspect","updateProjectionMatrix","setSize","onProgress","onLoad","position","x","y","z","lookAt","Orbitcontrols","autoRotate","autoRotateSpeed","enableZoom","enableDamping","dampingFactor","rotateSpeed","ambientLight","set","add","pointLight","spotLight","directionalLight","backgroundLoader","planetTexture","require","backgroundTexture","geometry","clone","loadTexture","side","blending","transparent","scale","load","background","setPixelRatio","devicePixelRatio","appendChild","domElement","addEventListener","init","animate","requestAnimationFrame","render","update","rotation","_this2","id","Fragment","src_Popup","App","src_Scene","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","src_App","URL","process","origin","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ddcb241e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/world.5ff0ee9d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/stars.f26eda03.jpg\";","import React, { Component } from \"react\";\nimport { HamburgerArrow } from \"react-animated-burgers\";\n\nclass Popup extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div className=\"menu\">\n        <HamburgerArrow\n          className=\"hamburger-button\"\n          isActive={this.props.showDetails}\n          toggleButton={this.props.closePopup}\n          barColor=\"white\"\n        />\n        <section className=\"section\">\n          <h3>About</h3>\n          <p>\n            Lorem Ipsum is simply dummy text of the printing and typesetting\n            industry. Lorem Ipsum has been the industry's standard dummy text\n            ever since the 1500s, when an unknown printer took a galley of type\n            and scrambled it to make a type specimen book. It has survived not\n            only five centuries, but also the leap into electronic typesetting,\n            remaining essentially unchanged. It was popularised in the 1960s\n            with the release of Letraset sheets containing Lorem Ipsum passages,\n            and more recently with desktop publishing software like Aldus\n            PageMaker including versions of Lorem Ipsum.\n          </p>\n        </section>\n\n        <section className=\"section\">\n          <h3>About</h3>\n          <p>\n            Lorem Ipsum is simply dummy text of the printing and typesetting\n            industry. Lorem Ipsum has been the industry's standard dummy text\n            ever since the 1500s, when an unknown printer took a galley of type\n            and scrambled it to make a type specimen book. It has survived not\n            only five centuries, but also the leap into electronic typesetting,\n            remaining essentially unchanged. It was popularised in the 1960s\n            with the release of Letraset sheets containing Lorem Ipsum passages,\n            and more recently with desktop publishing software like Aldus\n            PageMaker including versions of Lorem Ipsum.\n          </p>\n        </section>\n        <section className=\"section\">\n          <h3>About</h3>\n          <p>\n            Lorem Ipsum is simply dummy text of the printing and typesetting\n            industry. Lorem Ipsum has been the industry's standard dummy text\n            ever since the 1500s, when an unknown printer took a galley of type\n            and scrambled it to make a type specimen book. It has survived not\n            only five centuries, but also the leap into electronic typesetting,\n            remaining essentially unchanged. It was popularised in the 1960s\n            with the release of Letraset sheets containing Lorem Ipsum passages,\n            and more recently with desktop publishing software like Aldus\n            PageMaker including versions of Lorem Ipsum.\n          </p>\n        </section>\n        <section className=\"section\">\n          <h3>About</h3>\n          <p>\n            Lorem Ipsum is simply dummy text of the printing and typesetting\n            industry. Lorem Ipsum has been the industry's standard dummy text\n            ever since the 1500s, when an unknown printer took a galley of type\n            and scrambled it to make a type specimen book. It has survived not\n            only five centuries, but also the leap into electronic typesetting,\n            remaining essentially unchanged. It was popularised in the 1960s\n            with the release of Letraset sheets containing Lorem Ipsum passages,\n            and more recently with desktop publishing software like Aldus\n            PageMaker including versions of Lorem Ipsum.\n          </p>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default Popup;\n","import \"./index.css\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport Orbitcontrols from \"three-orbitcontrols\";\nimport { HamburgerArrow } from \"react-animated-burgers\";\nimport Popup from \"./Popup\";\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { showDetails: false };\n  }\n  componentDidMount() {\n    this.initThree();\n  }\n  togglePopup = () => {\n    this.setState({ showDetails: !this.state.showDetails });\n  };\n  initThree() {\n    let camera, scene, renderer;\n    // let group;\n    let container = document.getElementById(\"WebGL-output\");\n    let width = container.clientWidth,\n      height = container.clientHeight;\n    let windowHalfX = window.innerWidth / 2,\n      windowHalfY = window.innerHeight / 2;\n    let orbitControls;\n    let composer, renderPass;\n    let Shaders = {\n      earth: {\n        uniforms: {\n          texture: { type: \"t\", value: null }\n        },\n        vertexShader: [\n          \"varying vec3 vNormal;\",\n          \"varying vec2 vUv;\",\n          \"void main() {\",\n          \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n          \"vNormal = normalize( normalMatrix * normal );\",\n          \"vUv = uv;\",\n          \"}\"\n        ].join(\"\\n\"),\n        fragmentShader: [\n          \"uniform sampler2D texture;\",\n          \"varying vec3 vNormal;\",\n          \"varying vec2 vUv;\",\n          \"void main() {\",\n          \"vec3 diffuse = texture2D( texture, vUv ).xyz;\",\n          \"float intensity = 1.05 - dot( vNormal, vec3( 0.0, 0.0, 1.0 ) );\",\n          \"vec3 atmosphere = vec3( 10, 10, 10 ) * pow( intensity, 3.0 );\",\n          \"gl_FragColor = vec4( diffuse + atmosphere, 1.0 );\",\n          \"}\"\n        ].join(\"\\n\")\n      },\n      atmosphere: {\n        uniforms: {},\n        vertexShader: [\n          \"varying vec3 vNormal;\",\n          \"void main() {\",\n          \"vNormal = normalize( normalMatrix * normal );\",\n          \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n          \"}\"\n        ].join(\"\\n\"),\n        fragmentShader: [\n          \"varying vec3 vNormal;\",\n          \"void main() {\",\n          \"float intensity = pow( 0.8 - dot( vNormal, vec3( 0, 0, 1.0 ) ), 12.0 );\",\n          \"gl_FragColor = vec4( 2, 2, 2, 2 ) * intensity;\",\n          \"}\"\n        ].join(\"\\n\")\n      }\n    };\n    var shader, uniforms, material;\n    var mesh, atmosphere, point;\n\n    let loadingScreen = {\n      scene: new THREE.Scene(),\n      camera: new THREE.PerspectiveCamera(60, width / height, 1, 2000)\n      // box: new THREE.Mesh(\n      //   new THREE.BoxGeometry(0.5, 0.5, 0.5),\n      //   new THREE.MeshBasicMaterial({ color: 0x4444ff })\n      // )\n    };\n\n    let loadingManager = null;\n    let RESOURCES_LOADED = false;\n\n    init();\n    animate();\n\n    function init() {\n      // Init scene\n      scene = new THREE.Scene();\n\n      // Create a loading screen\n      loadingManager = new THREE.LoadingManager();\n      loadingManager.onProgress = function() {};\n      loadingManager.onLoad = function() {\n        RESOURCES_LOADED = true;\n      };\n\n      // Init camera and perspective\n      camera = new THREE.PerspectiveCamera(65, width / height, 1, 2000);\n      camera.position.x = 0;\n      camera.position.y = 300;\n      camera.position.z = 400;\n      camera.lookAt(scene.position);\n\n      // Orbitcontrols\n      orbitControls = new Orbitcontrols(camera);\n      orbitControls.autoRotate = true;\n      orbitControls.autoRotateSpeed = 0.2;\n      orbitControls.enableZoom = false;\n      orbitControls.enableDamping = true;\n      orbitControls.dampingFactor = 0.15; // friction factor\n      orbitControls.rotateSpeed = 0.1; // mouse sensitivity\n\n      // Lights\n      let ambientLight = new THREE.AmbientLight(0xffffff);\n      ambientLight.position.set(-10, 15, 500);\n      scene.add(ambientLight);\n\n      let pointLight = new THREE.PointLight(0xffffff);\n      pointLight.position.set(-10, 15, 500);\n      scene.add(pointLight);\n\n      let spotLight = new THREE.SpotLight(0xffffff);\n      spotLight.position.set(-10, 15, 500);\n      scene.add(spotLight);\n\n      let directionalLight = new THREE.DirectionalLight(0xffffff);\n      directionalLight.position.set(-10, 15, 500);\n      scene.add(directionalLight);\n\n      // Texture\n      let planetLoader = new THREE.TextureLoader(loadingManager);\n      let backgroundLoader = new THREE.CubeTextureLoader(loadingManager);\n      let planetTexture = require(\"./assets/imgs/planets/world.jpg\");\n      let backgroundTexture = require(\"./assets/imgs/planets/stars.jpg\");\n\n      // Load planet texture /w atmosphere\n      var geometry = new THREE.SphereGeometry(210, 64, 64);\n\n      shader = Shaders[\"earth\"];\n      uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n\n      uniforms[\"texture\"].value = THREE.ImageUtils.loadTexture(planetTexture);\n\n      material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader\n      });\n\n      mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n\n      shader = Shaders[\"atmosphere\"];\n      uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n\n      material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader,\n        side: THREE.BackSide,\n        blending: THREE.AdditiveBlending,\n        transparent: true\n      });\n\n      mesh = new THREE.Mesh(geometry, material);\n      mesh.scale.set(1.2, 1.2, 1.2);\n      scene.add(mesh);\n\n      // Load background texture (cube)\n      backgroundLoader.load(\n        [\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture,\n          backgroundTexture\n        ],\n        function(texture) {\n          scene.background = texture;\n        }\n      );\n\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(width, height);\n      container.appendChild(renderer.domElement);\n\n      window.addEventListener(\"resize\", onWindowResize, false);\n    }\n\n    function animate() {\n      if (RESOURCES_LOADED === false) {\n        requestAnimationFrame(animate);\n        renderer.render(loadingScreen.scene, loadingScreen.camera);\n        return; // Stop the function here.\n      }\n      requestAnimationFrame(animate);\n      orbitControls.update(); // required when damping is enabled; otherwise, not required\n      render();\n    }\n    function render() {\n      scene.rotation.y += 0.001;\n      renderer.render(scene, camera);\n    }\n    function onWindowResize() {\n      windowHalfX = window.innerWidth / 2;\n      windowHalfY = window.innerHeight / 2;\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  }\n  render() {\n    return (\n      <div id=\"WebGL-output\">\n        <div className=\"overlay\">\n          {this.state.showDetails ? (\n            <>\n              <Popup\n                showDetails={this.state.showDetails}\n                closePopup={() => this.togglePopup()}\n              />\n            </>\n          ) : (\n            <>\n              <h1 className=\"title text-center\">WEB DESIGN</h1>\n              <HamburgerArrow\n                className=\"hamburger-button\"\n                isActive={this.props.showDetails}\n                toggleButton={this.togglePopup}\n                barColor=\"white\"\n              />\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Scene;\n","import React, { Component } from \"react\";\nimport \"./index.css\";\nimport Scene from \"./Scene\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Scene />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}